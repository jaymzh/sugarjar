#!/opt/chef/embedded/bin/ruby
# SugarJar

require 'optparse'
require 'mixlib/shellout'
require_relative '../lib/sugarjar/commands'
require_relative '../lib/sugarjar/config'
require_relative '../lib/sugarjar/log'

SugarJar::Log.level = Logger::INFO

# Don't put defaults here, put them in SugarJar::Config
options = {}
# If ENV['SUGARJAR_DEBUG'] is set, it overrides the config file,
# but not the command line options, so set that one here. Also
# start the logger at that level, in case we are debugging option loading
# itself
if ENV['SUGARJAR_LOGLEVEL']
  options['log_level'] = SugarJar::Log.log_level = ENV['SUGARJAR_LOGLEVEL']
end
parser = OptionParser.new do |opts|
  opts.banner = 'Usage: sj <command> [<args>] [<options>]'

  opts.separator ''
  opts.separator 'Command, args, and options, can appear in any order.'
  opts.separator ''
  opts.separator 'OPTIONS:'

  opts.on('--log-level LEVEL', 'Enable debug logging') do |level|
    options['log_level'] = level
  end
  opts.on('-h', '--help', 'Print this help message') do
    puts opts
    exit
  end
  opts.on('--github-user USER', 'Github username') do |ghuser|
    options['ghuser'] = ghuser
  end

  # rubocop:disable Layout/HeredocIndentation
  opts.separator <<COMMANDS

COMMANDS:
  amend
              Amend the current commit. Alias for "git commit --amend".
              Accepts other arguments such as "-a" or files.

  amendq, qamend
              Same as "amend" but without changing the message. Alias for
              "git commit --amend --no-edit".

  bclean
              If safe, delete the current branch. Unlike "git branch -d",
              bclean can handle squash-merged branches. Think of it as
              a smarter "git branch -d".

  bcleanall
              Walk all branches, and try to delete them if it's safe. See
              "bclean" for details.

  binfo
              Verbose information about the current branch.

  br
              Verbose branch list. An alias for "git branch -v".

  feature
              Create a "feature" branch. It's morally equivalent to
              "git checkout -b" except it defaults to creating it based on
              some form of 'master' instead of your current branch. In order
              of preference it will be upstream/master, origin/master, master,
              depending upon what remotes are available.

  forcepush, fpush
              The same as "smartpush", but uses "--force-with-lease". This is
              a "safer" way of doing force-pushes and is the recommended way
              to push after rebasing or amending. Never do this to shared
              branches. Very convenient for keeping the branch behind a pull-
              request clean.

  lint
              Run any linters configured in .sugarjar.yaml.

  smartclone, sclone
              A smart wrapper to "git clone" that handles forking and managing
              remotes for you.
              It will clone a git repository using hub-style short name
              ("$org/$repo"). If the org of the repository is not the same
              as your github-user then it will fork the repo for you to
              your account (if not already done) and then setup your remotes
              so that "origin" is your fork and "upstream" is the upstream.

  smartpush, spush
              A smart wrapper to "git push" that runs whatever is defined in
              "on_push" in .sugarjar.yml, and only pushes if they succeed.

  unit
              Run any unitests configured in .sugarjar.yaml.

  up
              Rebase the current branch on upstream/master or origin/master.

  upall
              Same as "up", but for all branches.
COMMANDS

  # rubocop:enable Layout/HeredocIndentation
end

# The first one is our subcommand
subcommand = ARGV.shift
SugarJar::Log.debug("subcommand is #{subcommand}")

extra_opts = []

# We want to allow people to pass in extra args to be passed to
# git commands, but OptionParser doesn't easily allow this. So we
# loop over it, catching exceptions.
begin
  parser.parse!
rescue OptionParser::InvalidOption => e
  extra_opts += e.args
  retry
end

options = SugarJar::Config.config.merge(options)
SugarJar::Log.level = options['log_level'].to_sym if options['log_level']

# Extra options we got, plus any left over arguements are what we
# pass to Commands so they can be passed to git as necessary
extra_opts += ARGV
SugarJar::Log.debug("extra unknown options: #{extra_opts}")

if subcommand == 'help' || subcommand.start_with?('-h')
  puts parser
  exit
end

sj = SugarJar::Commands.new(options)
begin
  sj.send(subcommand.to_sym, *extra_opts)
rescue NoMethodError
  SugarJar::Log.error("Unknown command: #{subcommand}")
rescue ArgumentError => e
  SugarJar::Log.error("#{subcommand}: #{e}")
end
